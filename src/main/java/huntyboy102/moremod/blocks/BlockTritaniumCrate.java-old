
package matteroverdrive.blocks;

import huntyboy102.moremod.api.wrench.IDismantleable;
import huntyboy102.moremod.blocks.includes.MOBlock;
import huntyboy102.moremod.blocks.includes.MOBlockMachine;
import huntyboy102.moremod.data.Inventory;
import huntyboy102.moremod.init.MatterOverdriveSounds;
import huntyboy102.moremod.tile.TileEntityTritaniumCrate;
import huntyboy102.moremod.util.MOBlockHelper;
import huntyboy102.moremod.util.MOInventoryHelper;
import net.minecraft.block.material.Material;
import net.minecraft.block.state.IBlockState;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.NonNullList;
import net.minecraft.util.SoundCategory;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.text.TextComponentString;
import net.minecraft.util.text.TextFormatting;
import net.minecraft.world.IBlockAccess;
import net.minecraft.world.World;

import javax.annotation.Nonnull;
import java.util.ArrayList;

public class BlockTritaniumCrate extends MOBlockMachine<TileEntityTritaniumCrate> implements IDismantleable {

    private static final AxisAlignedBB BOX_NORTH_SOUTH = new AxisAlignedBB(0, 0, 2 / 16d, 1, 12 / 16d, 14 / 16d);
    private static final AxisAlignedBB BOX_EAST_WEST = new AxisAlignedBB(2 / 16d, 0, 0, 14 / 16d, 12 / 16d, 1);

    public BlockTritaniumCrate(Material material, String name) {
        super(material, name);
        setHardness(20.0F);
        this.setResistance(9.0f);
        this.setHarvestLevel("pickaxe", 2);
        setHasRotation();
        setRotationType(MOBlockHelper.RotationType.FOUR_WAY);
    }

    @Override
    @Deprecated
    public boolean isFullCube(IBlockState state) {
        return false;
    }

    @Nonnull
    @Override
    @Deprecated
    public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess source, BlockPos pos) {
        EnumFacing dir = state.getValue(MOBlock.PROPERTY_DIRECTION);
        return dir == EnumFacing.NORTH || dir == EnumFacing.SOUTH ? BOX_NORTH_SOUTH : BOX_EAST_WEST;
    }

    @Override
    public Class<TileEntityTritaniumCrate> getTileEntityClass() {
        return TileEntityTritaniumCrate.class;
    }

    @Nonnull
    @Override
    public TileEntity createTileEntity(@Nonnull World world, @Nonnull IBlockState state) {
        return new TileEntityTritaniumCrate();
    }

    @Override
    @Deprecated
    public boolean isOpaqueCube(IBlockState state) {
        return false;
    }

    @Override
    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ) {
        if (worldIn.isRemote) {
            return true;
        } else {
            TileEntity entity = worldIn.getTileEntity(pos);
            if (entity instanceof TileEntityTritaniumCrate) {
                //FMLNetworkHandler.openGui(entityPlayer, MatterOverdrive.instance, GuiHandler.TRITANIUM_CRATE, world, x, y, z);
                worldIn.playSound(null, pos.getX(), pos.getY(), pos.getZ(), MatterOverdriveSounds.blocksCrateOpen, SoundCategory.BLOCKS, 0.5f, 1);
                playerIn.displayGUIChest(((TileEntityTritaniumCrate) entity).getInventory());
                return true;
            }
        }
        return false;
    }

    @Override
    protected Inventory getInventory(World world, BlockPos pos) {
        if (world.getTileEntity(pos) instanceof TileEntityTritaniumCrate) {
            TileEntityTritaniumCrate machine = (TileEntityTritaniumCrate) world.getTileEntity(pos);

            return machine.getInventory();
        }

        return null;
    }

    @Override
    public ArrayList<ItemStack> dismantleBlock(EntityPlayer player, World world, BlockPos pos, boolean returnDrops) {
        TileEntity tile = world.getTileEntity(pos);

        ItemStack s = new ItemStack(this);

        if (tile instanceof TileEntityTritaniumCrate) {
            IBlockState state = world.getBlockState(pos);

            state.getBlock().harvestBlock(world, player, pos, state, world.getTileEntity(pos), ItemStack.EMPTY);

            state.getBlock().removedByPlayer(state, world, pos, player, false);
        }

        return new ArrayList<>();

//        IBlockState state = world.getBlockState(pos);
//
//        state.getBlock().removedByPlayer(state, world, pos, player, false);
//
//        return new ArrayList<>();

//        ItemStack s = new ItemStack(this);
//
//        ArrayList<ItemStack> items = new ArrayList<>();
//
//        IBlockState state = world.getBlockState(pos);
//
//        player.sendMessage(new TextComponentString("Returning drops: " + returnDrops));
//
//        TileEntityTritaniumCrate tileEntity = (TileEntityTritaniumCrate)world.getTileEntity(pos);
//
//        if (!returnDrops) {
//            NBTTagCompound tag = new NBTTagCompound();
//
//            if (tileEntity != null) {
//                player.sendMessage(new TextComponentString("Writing out inventory."));
//
//                tileEntity.writeInv(tag, true);
//            }
//
//            if (!tag.isEmpty()) {
//                s.setTagCompound(tag);
//            }
//
//            state.getBlock().harvestBlock(world, player, pos, state, world.getTileEntity(pos), ItemStack.EMPTY);
//
//            state.getBlock().removedByPlayer(state, world, pos, player, false);
//        } else {
//            player.sendMessage(new TextComponentString("Second entry."));
//
//            state.getBlock().removedByPlayer(state, world, pos, player, true);
//
//            state.getBlock().breakBlock(world, pos, state);
//
//            for (ItemStack itemStack: getDrops(world, pos, state, 0)) {
//                MOInventoryHelper.insertItemStackIntoInventory(player.inventory, itemStack, EnumFacing.DOWN);
//            }
//        }
//
//        return items;
    }

    @Override
    public void breakBlock(World world, BlockPos pos, IBlockState state) {

    }

    @Override
    public void onBlockPlacedBy(World world, BlockPos pos, IBlockState state, EntityLivingBase entity, ItemStack stack) {
        if (stack.getTagCompound() != null) {
            TileEntityTritaniumCrate tile = (TileEntityTritaniumCrate) world.getTileEntity(pos);

            tile.readInv(stack.getTagCompound());
        }

        super.onBlockPlacedBy(world, pos, state, entity, stack);

    }

//    @Override
//    public boolean removedByPlayer(IBlockState state, World world, BlockPos pos, EntityPlayer player, boolean willHarvest) {
//        TileEntityTritaniumCrate tile = (TileEntityTritaniumCrate) world.getTileEntity(pos);
//
//        ItemStack s = new ItemStack(this);
//
//        if (tile != null && !world.isRemote && !world.restoringBlockSnapshots) {
//            NBTTagCompound tag = new NBTTagCompound();
//
//            player.sendMessage(new TextComponentString("Writing out inventory."));
//
//            tile.writeInv(tag, player);
//
//            if (!tag.isEmpty()) {
//                s.setTagCompound(tag);
//            }
//
//            state.getBlock().harvestBlock(world, player, pos, state, world.getTileEntity(pos), ItemStack.EMPTY);
//
//            state.getBlock().removedByPlayer(state, world, pos, player, false);
//        }
//
//        return super.removedByPlayer(state, world, pos, player, willHarvest);
//    }

//    @Override
//    public boolean removedByPlayer(IBlockState state, World world, BlockPos pos, EntityPlayer player, boolean willHarvest) {
//        return willHarvest || super.removedByPlayer(state, world, pos, player, false);
//    }

//    @Override
//    public void harvestBlock(World world, EntityPlayer player, BlockPos pos, IBlockState state, TileEntity tile, ItemStack stack) {
//        super.harvestBlock(world, player, pos, state, tile, stack);
//
//        world.setBlockToAir(pos);
//    }
//
    @Override
    public boolean canDismantle(EntityPlayer player, World world, BlockPos pos) {
        return true;
    }

//    @Override
//    public void getDrops(NonNullList<ItemStack> drops, IBlockAccess world, BlockPos pos, IBlockState state, int fortune) {
//        drops.clear();
//    }

//    @Override
//    public void getDrops(NonNullList<ItemStack> drops, IBlockAccess world, BlockPos pos, IBlockState state, int fortune) {
//        ItemStack s = new ItemStack(this);
//
//        TileEntity tile = world.getTileEntity(pos);
//
//        if (!(tile instanceof TileEntityTritaniumCrate)) {
//            return;
//        }
//
//        NBTTagCompound tag = new NBTTagCompound();
//
//        ((TileEntityTritaniumCrate) tile).writeInv(tag, true);
//
//        if (!tag.isEmpty()) {
//            s.setTagCompound(tag);
//        }
//
//        drops.add(s);
//    }

    private void DisplayInfo(EntityPlayer player, String msg, TextFormatting formatting) {
        if (player != null && !msg.isEmpty()) {
            player.sendStatusMessage(new TextComponentString(formatting + msg), true);
        }
    }
}
